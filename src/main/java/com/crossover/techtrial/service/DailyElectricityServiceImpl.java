package com.crossover.techtrial.service;


import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.repository.DailyElectricityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import java.util.LongSummaryStatistics;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * DailyElectricityServiceImpl will fetch daily statistics of electricity generated <BR/>
 * by this Panel from the day it registered to end of previous day.
 *
 *
 */

@Service
public class DailyElectricityServiceImpl implements DailyElectricityService {
    @Autowired
    DailyElectricityRepository dailyElectricityRepository;

    public List<DailyElectricity> getAllDailyElectricityByPanelId(Long panelId, Pageable pageable){

        List<DailyElectricity> dailyElectricityList = new ArrayList<>();

        Page<HourlyElectricity> hourlyElectricityList = dailyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);

        LocalDateTime today = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);

        // Aggreage sum, min, max, average and return for electricity generated by this panel each day up to the end of previous day ,
        if(hourlyElectricityList!=null && hourlyElectricityList.getNumberOfElements() > 0){

            ZoneId defaultZoneId = ZoneId.systemDefault();

            Map<LocalDate,List<HourlyElectricity>> hourlyElectricityByReadingAt = hourlyElectricityList.stream()
                    .filter(e -> e.getPanel().getId().equals(panelId))
                    .filter(hourlyElectricity-> hourlyElectricity.getReadingAt().isBefore(today))
                    .collect(Collectors.groupingBy(HourlyElectricity::getReadingAtDate));

            if(hourlyElectricityByReadingAt!=null && !hourlyElectricityByReadingAt.isEmpty()){
                for (List<HourlyElectricity> HourlyElectricityListNew : hourlyElectricityByReadingAt.values()){
                    LongSummaryStatistics stats =   HourlyElectricityListNew.stream()
                            .mapToLong((hourlyElectricity) -> hourlyElectricity.getGeneratedElectricity()).summaryStatistics();

                    DailyElectricity dailyElectricity = new DailyElectricity();
                    dailyElectricity.setDate(HourlyElectricityListNew.get(0).getReadingAt().toLocalDate());
                    dailyElectricity.setSum(stats.getSum());
                    dailyElectricity.setAverage(stats.getAverage());
                    dailyElectricity.setMin(stats.getMin());
                    dailyElectricity.setMax(stats.getMax());
                    dailyElectricityList.add(dailyElectricity);
                }
            }

        }

        return dailyElectricityList;
    }

    public void setDailyElectricityRepository(DailyElectricityRepository dailyElectricityRepository) {
        this.dailyElectricityRepository = dailyElectricityRepository;
    }
}